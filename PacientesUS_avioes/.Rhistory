#mudando o separador decimal para resultados "printados"
options(OutDec= ",",digits = 2)
suppressPackageStartupMessages(library(qicharts))
install.packages(qicharts)
install.packages("qicharts")
install.packages("reshape2")
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("captioner")
suppressPackageStartupMessages(library(qicharts))
suppressPackageStartupMessages(library(reshape2))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(tidyverse))
install.packages("tidyverse")
suppressPackageStartupMessages(library(qicharts))
suppressPackageStartupMessages(library(reshape2))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(tidyverse))
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
remove.packages(tidyverse)
remove.packages("tidyverse")
require(tidyverse)
library(tidyverse)
suppressPackageStartupMessages(library(qicharts))
suppressPackageStartupMessages(library(reshape2))
library(tidyverse)
suppressPackageStartupMessages(library(qicharts))
suppressPackageStartupMessages(library(reshape2))
#suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(captioner))
tidyverse_update()
library(MASS)
#>
#> Attaching package: 'MASS'
#> The following object is masked from 'package:dplyr':
#>
#>     select
tidyverse_conflicts()
install.packages("tidyverse")
tidyverse_conflicts()
remove.packages(ggplot2)
remove.packages("ggplot2")
remove.packages("dplyr")
remove.packages("tidyr")
remove.packages("purrr")
remove.packages("tibble")
remove.packages("tibble")
install.packages("tidyverse")
install.packages("tidyverse")
suppressPackageStartupMessages(library(qicharts))
suppressPackageStartupMessages(library(reshape2))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(qicharts))
suppressPackageStartupMessages(library(reshape2))
#suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(captioner))
figs <- captioner(prefix="Figura")
tbls <- captioner(prefix="Tabela")
# Legendas para Tabelas
legenda_table1 = tbls(name="table_estat_descr1",caption = "Estatísticas Descritivas para Primeira Tentativa")
legenda_table2 = tbls(name="table_estat_descr2",caption = "Estatísticas Descritivas para Segunda Tentativa")
legenda_table3 = tbls(name="table_estat_descr3",caption = "Estatísticas Descritivas para Terceira Tentativa")
# Legendas Para Gráficos
legenda_graf_contr_1 = figs(name="graf1_controle",caption = "Gráficos de Controle para Primeira Tentativa")
legenda_graf_contr_2 = figs(name="graf2_controle",caption = "Gráficos de Controle para Segunda Tentativa")
legenda_graf_contr_3 = figs(name="graf3_controle",caption = "Gráficos de Controle para Terceira Tentativa")
legenda_Boxplot_1 = figs(name="boxplot1",caption = "Boxplot para Primeira Tentativa")
legenda_Boxplot_2 = figs(name="boxplot2",caption = "Boxplot para Segunda Tentativa")
legenda_Boxplot_3 = figs(name="boxplot3",caption = "Boxplot para Terceira Tentativa")
generator <-function(x,n){
qic(y = x, chart = 'i',
main = n,
ylab = 'Tempo de atendimento(s)',
xlab = 'Pacientes')
}
dados1 = read.csv("dados_green_belt_Pagina1.csv",header=T,dec=",")
names(dados1)=c("Aviao","Tentativa","1","2","3","4","Aux","tpermanencia","Toperacao")
# Banco de dados em que tirei as tres ultimas variáveis, nao considerando tentativa, enm o aviao
dtoperadores = melt(dados1[,3:6])
names(dtoperadores) = c("Operador","Tempo")
# filtragem por tentativa e operador
## Primeira Tentativa
tentativa_1 = filter(dados1,Tentativa==1)
View(dados1)
filter(dados1,Tentativa == 1)
filter(dados1, dados1$Tentativa == 1)
library(printr)
media = aggregate(dtoperadores_tentativa_1$Tempo,by=list(dtoperadores_tentativa_1$Operador),mean)$x
suppressPackageStartupMessages(library(qicharts))
suppressPackageStartupMessages(library(reshape2))
#suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(captioner))
figs <- captioner(prefix="Figura")
tbls <- captioner(prefix="Tabela")
# Legendas para Tabelas
legenda_table1 = tbls(name="table_estat_descr1",caption = "Estatísticas Descritivas para Primeira Tentativa")
legenda_table2 = tbls(name="table_estat_descr2",caption = "Estatísticas Descritivas para Segunda Tentativa")
legenda_table3 = tbls(name="table_estat_descr3",caption = "Estatísticas Descritivas para Terceira Tentativa")
# Legendas Para Gráficos
legenda_graf_contr_1 = figs(name="graf1_controle",caption = "Gráficos de Controle para Primeira Tentativa")
legenda_graf_contr_2 = figs(name="graf2_controle",caption = "Gráficos de Controle para Segunda Tentativa")
legenda_graf_contr_3 = figs(name="graf3_controle",caption = "Gráficos de Controle para Terceira Tentativa")
legenda_Boxplot_1 = figs(name="boxplot1",caption = "Boxplot para Primeira Tentativa")
legenda_Boxplot_2 = figs(name="boxplot2",caption = "Boxplot para Segunda Tentativa")
legenda_Boxplot_3 = figs(name="boxplot3",caption = "Boxplot para Terceira Tentativa")
generator <-function(x,n){
qic(y = x, chart = 'i',
main = n,
ylab = 'Tempo de atendimento(s)',
xlab = 'Pacientes')
}
dados1 = read.csv("dados_green_belt_Pagina1.csv",header=T,dec=",")
names(dados1)=c("Aviao","Tentativa","1","2","3","4","Aux","tpermanencia","Toperacao")
# Banco de dados em que tirei as tres ultimas variáveis, nao considerando tentativa, enm o aviao
dtoperadores = melt(dados1[,3:6])
names(dtoperadores) = c("Operador","Tempo")
# filtragem por tentativa e operador
## Primeira Tentativa
tentativa_1 = filter(dados1,Tentativa==1)
library(dplyr)
tentativa_1 = filter(dados1,Tentativa==1)
dados1 = read.csv("dados_green_belt_Pagina1.csv",header=T,dec=",")
names(dados1)=c("Aviao","Tentativa","1","2","3","4","Aux","tpermanencia","Toperacao")
# Banco de dados em que tirei as tres ultimas variáveis, nao considerando tentativa, enm o aviao
dtoperadores = melt(dados1[,3:6])
names(dtoperadores) = c("Operador","Tempo")
# filtragem por tentativa e operador
## Primeira Tentativa
library(dplyr)
tentativa_1 = filter(dados1,Tentativa==1)
dtoperadores_tentativa_1 = melt(tentativa_1[,3:6])
names(dtoperadores_tentativa_1) = c("Operador","Tempo")
## tempo de operacao da primeira tentativa
temp_op_1 = tentativa_1[10,9]/60
temp_perm_1 = tentativa_1[10,8]/60
## Segunda Tentativa
tentativa_2 = filter(dados1,Tentativa==2)
dtoperadores_tentativa_2 = melt(tentativa_2[,3:6])
names(dtoperadores_tentativa_2) = c("Operador","Tempo")
## tempo de operacao da segunda tentativa
temp_op_2 = tentativa_2[10,9]/60
temp_perm_2 = tentativa_2[10,8]/60
## Terceira Tentativa
tentativa_3 = filter(dados1,Tentativa==3)
tentativa_3$`4`=NULL
dtoperadores_tentativa_3 = melt(tentativa_3[,3:5])
names(dtoperadores_tentativa_3) = c("Operador","Tempo")
## tempo de operacao da terceira tentativa
temp_op_3 = tentativa_3[10,9]/60
temp_perm_3 = tentativa_3[10,8]/60
library(printr)
media = aggregate(dtoperadores_tentativa_1$Tempo,by=list(dtoperadores_tentativa_1$Operador),mean)$x
desvio = aggregate(dtoperadores_tentativa_1$Tempo,by=list(dtoperadores_tentativa_1$Operador),sd)$x
ID = 1:4
estat_descr = data.frame(ID,media,desvio)
names(estat_descr)=c("Operador","Média","Desvio Padrão")
estat_descr
par(mfrow=c(2,2)) #M??ltiplos plotes
op1.graph <- generator(tentativa_1$`1`,"Operador 1") #Gerando o grafico
op2.graph <- generator(tentativa_1$`2`,"Operador 2")
op3.graph <- generator(tentativa_1$`3`,"Operador 3")
op4.graph <- generator(tentativa_1$`4`,"Operador 4")
#CL é a média (ponderada) de cada operador
#Os limites de controle representam os limites da chamada varialçao de causa comum inerente ao processo.
?qic()
ggplot(data=dtoperadores_tentativa_1,aes(x=factor(Operador),y=Tempo))+geom_boxplot(outlier.shape = 20, outlier.size =2.5,outlier.color ="red")+theme_bw()+xlab("Operador")
library(ggplot2)
ggplot(data=dtoperadores_tentativa_1,aes(x=factor(Operador),y=Tempo))+geom_boxplot(outlier.shape = 20, outlier.size =2.5,outlier.color ="red")+theme_bw()+xlab("Operador")
library(printr)
media = aggregate(dtoperadores_tentativa_2$Tempo,by=list(dtoperadores_tentativa_2$Operador),mean)$x
desvio = aggregate(dtoperadores_tentativa_2$Tempo,by=list(dtoperadores_tentativa_2$Operador),sd)$x
ID = 1:4
estat_descr = data.frame(ID,media,desvio)
names(estat_descr)=c("Operador","Média","Desvio Padrão")
estat_descr
par(mfrow=c(2,2)) #M??ltiplos plotes
op1.graph <- generator(tentativa_2$`1`,"Operador 1") #Gerando o grafico
op2.graph <- generator(tentativa_2$`2`,"Operador 2")
op3.graph <- generator(tentativa_2$`3`,"Operador 3")
op4.graph <- generator(tentativa_2$`4`,"Operador 4")
#CL é a média (ponderada) de cada operador
#Os limites de controle representam os limites da chamada varialçao de causa comum inerente ao processo.
ggplot(data=dtoperadores_tentativa_2,aes(x=factor(Operador),y=Tempo))+geom_boxplot(outlier.shape = 20, outlier.size =2,outlier.color ="red")+theme_bw()+xlab("Operador")
library(printr)
media = aggregate(dtoperadores_tentativa_3$Tempo,by=list(dtoperadores_tentativa_3$Operador),mean)$x
desvio = aggregate(dtoperadores_tentativa_3$Tempo,by=list(dtoperadores_tentativa_3$Operador),sd)$x
ID = 1:3
estat_descr = data.frame(ID,media,desvio)
names(estat_descr)=c("Operador","Média","Desvio Padrão")
estat_descr
par(mfrow=c(3,1)) #M??ltiplos plotes
op1.graph <- generator(tentativa_3$`1`,"Operador 1") #Gerando o grafico
op2.graph <- generator(tentativa_3$`2`,"Operador 2")
op3.graph <- generator(tentativa_3$`3`,"Operador 3")
#CL é a média (ponderada) de cada operador
#Os limites de controle representam os limites da chamada varialçao de causa comum inerente ao processo.
ggplot(data=dtoperadores_tentativa_3,aes(x=factor(Operador),y=Tempo))+geom_boxplot(outlier.shape = 20, outlier.size =2,outlier.color ="red")+theme_bw()+xlab("Operador")
#mudando o separador decimal para resultados "printados"
options(OutDec= ",",digits = 2)
suppressPackageStartupMessages(library(qicharts))
install.packages(qicharts)
install.packages("qicharts")
install.packages("reshape2")
install.packages("captioner")
#mudando o separador decimal para resultados "printados"
options(OutDec= ",",digits = 2)
suppressPackageStartupMessages(library(qicharts))
suppressPackageStartupMessages(library(reshape2))
#estÃ¡ como comentÃ¡rio pois estava dando erro aqui em casa (Guilherme), entÃ£o tem que chamar os pacotes um a um antes de usa-los.
#suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(captioner))
figs <- captioner(prefix="Figura")
tbls <- captioner(prefix="Tabela")
# Legendas para Tabelas
legenda_table1 = tbls(name="table_estat_descr1",caption = "EstatÃ�sticas Descritivas para Primeira Tentativa")
legenda_table2 = tbls(name="table_estat_descr2",caption = "EstatÃ�sticas Descritivas para Segunda Tentativa")
legenda_table3 = tbls(name="table_estat_descr3",caption = "EstatÃ�sticas Descritivas para Terceira Tentativa")
# Legendas Para GrÃ¡ficos
legenda_graf_contr_1 = figs(name="graf1_controle",caption = "GrÃ¡ficos de Controle para Primeira Tentativa")
legenda_graf_contr_2 = figs(name="graf2_controle",caption = "GrÃ¡ficos de Controle para Segunda Tentativa")
legenda_graf_contr_3 = figs(name="graf3_controle",caption = "GrÃ¡ficos de Controle para Terceira Tentativa")
legenda_Boxplot_1 = figs(name="boxplot1",caption = "Boxplot para Primeira Tentativa")
legenda_Boxplot_2 = figs(name="boxplot2",caption = "Boxplot para Segunda Tentativa")
legenda_Boxplot_3 = figs(name="boxplot3",caption = "Boxplot para Terceira Tentativa")
#gerando os grÃ¡ficos de controle do tipo i (de individuais)
generator <-function(x,n){
qic(y = x, chart = 'i',
main = n,
ylab = 'Tempo de atendimento(s)',
xlab = 'Pacientes')
}
dados1 = read.csv("dados_green_belt_Pagina1.csv",header=T,dec=",")
names(dados1)=c("Aviao","Tentativa","1","2","3","4","Aux","tpermanencia","Toperacao")
# Banco de dados em que tirei as tres ultimas variÃ¡veis, nao considerando tentativa, enm o aviao
dtoperadores = melt(dados1[,3:6])
names(dtoperadores) = c("Operador","Tempo")
# filtragem por tentativa e operador
## Primeira Tentativa
suppressPackageStartupMessages(library(dplyr))
tentativa_1 = filter(dados1,Tentativa==1)
dtoperadores_tentativa_1 = melt(tentativa_1[,3:6])
names(dtoperadores_tentativa_1) = c("Operador","Tempo")
## tempo de operacao da primeira tentativa
temp_op_1 = tentativa_1[10,9]/60
temp_perm_1 = tentativa_1[10,8]/60
## Segunda Tentativa
tentativa_2 = filter(dados1,Tentativa==2)
dtoperadores_tentativa_2 = melt(tentativa_2[,3:6])
names(dtoperadores_tentativa_2) = c("Operador","Tempo")
## tempo de operacao da segunda tentativa
temp_op_2 = tentativa_2[10,9]/60
temp_perm_2 = tentativa_2[10,8]/60
## Terceira Tentativa
tentativa_3 = filter(dados1,Tentativa==3)
tentativa_3$`4`=NULL
dtoperadores_tentativa_3 = melt(tentativa_3[,3:5])
names(dtoperadores_tentativa_3) = c("Operador","Tempo")
## tempo de operacao da terceira tentativa
temp_op_3 = tentativa_3[10,9]/60
temp_perm_3 = tentativa_3[10,8]/60
library(printr)
install.packages('printr')
# or the dev version
install.packages(
'printr',
type = 'source',
repos = c('https://xran.yihui.name', 'https://cran.rstudio.com')
)
install.packages("printr")
library(printr)
media = aggregate(dtoperadores_tentativa_1$Tempo,by=list(dtoperadores_tentativa_1$Operador),mean)$x
desvio = aggregate(dtoperadores_tentativa_1$Tempo,by=list(dtoperadores_tentativa_1$Operador),sd)$x
ID = 1:4
estat_descr = data.frame(ID,media,desvio)
names(estat_descr)=c("Operador","MÃ©dia","Desvio PadrÃ£o")
estat_descr
par(mfrow=c(2,2)) #M??ltiplos plotes
op1.graph <- generator(tentativa_1$`1`,"Operador 1") #Gerando o grafico
op1.graph <- generator(tentativa_1$`1`,"Operador 1") #Gerando o grafico
#gerando os grÃ¡ficos de controle do tipo i (de individuais)
library(qicharts)
generator <-function(x,n){
qic(y = x, chart = 'i',
main = n,
ylab = 'Tempo de atendimento(s)',
xlab = 'Pacientes')
}
library(printr)
media = aggregate(dtoperadores_tentativa_1$Tempo,by=list(dtoperadores_tentativa_1$Operador),mean)$x
desvio = aggregate(dtoperadores_tentativa_1$Tempo,by=list(dtoperadores_tentativa_1$Operador),sd)$x
ID = 1:4
estat_descr = data.frame(ID,media,desvio)
names(estat_descr)=c("Operador","MÃ©dia","Desvio PadrÃ£o")
estat_descr
par(mfrow=c(2,2)) #M??ltiplos plotes
op1.graph <- generator(tentativa_1$`1`,"Operador 1") #Gerando o grafico
op2.graph <- generator(tentativa_1$`2`,"Operador 2")
op3.graph <- generator(tentativa_1$`3`,"Operador 3")
op4.graph <- generator(tentativa_1$`4`,"Operador 4")
#CL Ã© a mÃ©dia (ponderada) de cada operador
#Os limites de controle representam os limites da chamada varialÃ§ao de causa comum inerente ao processo.
